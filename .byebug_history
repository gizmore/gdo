c
n
q
mod
n
s
mod
n
s
c
q
self.class
s
n
self
n
s
n
s
mod.class
mod
c
mod_db
q
@enum
@enum.next
c
@enum.next
mod_db.get_vars
mod_db,get_vars
q
mod
c
n
s
version
mod
version
c
n
c
n
s
version
n
mod
c
q
mod_db
mod
q
w
mod
mod_db
q
::GDO::Core::Module.instance
c
var
n
s
d
n
q
mod
mod.module_enabled
c
id
n
gdo
q
s
mod_db
n
mod
mod.class
mod.klass
mod
c
q
y
q
s
name
anme
name
c
puts i
i
n
from
self
s
name.rsubstr_from('::').downcase
name.rsubstr_from('::')
name.rsubstr_from('G')
name
c
q
pk.first[1]
pk.first.second
pk.first.first
pk.first
pk
n
e
n
pk
n
c
cv
c
s
c
n
s
q
s
mod
c
v
n
q
mod_db
mod
n
c
n
 sprintf(text, *args)
 sprintf(text, *args))
*args
args
text
n
c
n
s
key
n
key
@cache
n
iso
@cache[iso]
@cache
n
@cache
n
q
@pathes
s
q
@pathes
n
iso
s
key
c
 @gdo_vars[name.to_s]
@gdo_vars
name
q
c
q
row.table._cache
row.table.cache
row
c
q
row._cache
row.table._cache
::GDO::SPECSimpleKV.table.find('version')
row
c
q
row
c
n
@cache
n
id
c
q
n
id
c
n
gdo
n
  @cache[id]
n
id
n
c
query
q
dummy
n
vars
c
v
c
#+c
q
@enum.next
@enum
c
q
@result.hash
@result.fields
@result.to_h
@result.fetch_fields
@result.class.instance_methods
@result
c
n
c
n
s
query
q
k
data
s
q
k
n
k
q
help k
k
data[k.to_sym]
data[k]
k
data[:svk_key]
data
q

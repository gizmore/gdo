q
nq
n
s
d
self.new.instance
self.new
self.methods.sort
self.methods
self
s
Object.const_get("#{name}::#{const_name}")
n
s
c
excepetion
s
e
s
e
s
c
instance
q
path
c
klass
q
load "GDO/User/Module.rb"
load path
path
load "GDO/User/Module.rb"
load "GDO/User/Module"
require "GDO/User/Module"
path
require path
path
include 
include path
path
q
c
path
c
q
c
q
name
self
q
::GDO::Core.is_a? Class
self.is_a? Module
self.is_a? Class
self
q
c
q
path
q
@path
n
path
q
c
n
s
n
s
c
q
s
klass
n
q
mod.module_package
mod.module_name
mod
"#{mod.module_package}::Upgrade#{version}"
mod
klass
n
c
mod2
n
klass.instance.set_config_var(mv.get_var('mv_key'), mv.get_var('mv_value'))
c
self
n
puts var
var
field
n
s
klass
q
module_config_var(field)
s
 @gdo_vars[name.to_s]
name
@gdo_vars
s
klass.instance
klass
n
c
klass
q
mv
klass
q
::GDO.const_get('Test').const_get('Module')
::GDO.const_get('Test')
::GDO.const_get
::GDO
q
Object.const_get("GDO::Test::Module")
GDO::Test::Module
Object.const_get("GDO::Test::Module")
Object.const_get("GDO::#{mod['module_name']}::Module")
n
"GDO::#{mod['module_name']}::Module"
klass = Object.const_get("GDO::#{mod['module_name']}::Module")
klass
mod
klass
c
klass
mod
c
n
klass
c
n
klass
q
@modules
c
q
@modules
klass.instance
@modules
c
vars
s
n
mod
n
mod
n
@modules
klass.instance
klass
c
n
s
klasss
klass
q
self
self.class.name.gsub('::','/')+".rb"
s
klass
q
exception
s
klass
q
klass
q
exception
n
s
klass
q
e
s
klass
c
q
::GDO::Core::ModuleLoader.instance
load "GDO/Core/Module.rb"
load "GDO/Core/Module"
::GDO::Core::Module.instance
::GDO::Core::Module
c
q
self
mods
n
c
q
@modules
mods
n
mods
c
@modules[klass.to_s]
n
@modules[klass.to_s]
@modules
klass
n
b
@modules[klass.to_s]
n
@modules[klass.to_s]
@modules
n
@modules
klass
q
@modules
n
klass
c
n
klass
q
e
n
s
dirty
self
n
s
n
@modules[klass.to_s]
@modules
klass
n
klass
q
mod2
n
mod2
mod
c
q
mod2
c
mod
n
klass
n
s
@gdo_vars
s
vars
s
@modules
c
mod2
c
q
@modules
klass

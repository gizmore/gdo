c
n
s
klasss
klass
q
self
self.class.name.gsub('::','/')+".rb"
s
klass
q
exception
s
klass
q
klass
q
exception
n
s
klass
q
e
s
klass
c
q
::GDO::Core::ModuleLoader.instance
load "GDO/Core/Module.rb"
load "GDO/Core/Module"
::GDO::Core::Module.instance
::GDO::Core::Module
c
q
self
mods
n
c
q
@modules
mods
n
mods
c
@modules[klass.to_s]
n
@modules[klass.to_s]
@modules
klass
n
b
@modules[klass.to_s]
n
@modules[klass.to_s]
@modules
n
@modules
klass
q
@modules
n
klass
c
n
klass
q
e
n
s
dirty
self
n
s
n
@modules[klass.to_s]
@modules
klass
n
klass
q
mod2
n
mod2
mod
c
q
mod2
c
mod
n
klass
n
s
@gdo_vars
s
vars
s
@modules
c
mod2
c
q
@modules
klass
n
@modules
q
c
mod2
c
@modules
klass
c
q
s
mod
klass
q
mod2
q
@modules
mod
q
mod2
q
mod
n
q
c
klass
c
klass
c
klass
c
klass
c
klass
c
q
c
q
c
const
c
const
c
const
c
const
c
const.constants
c
const.constants
const
c
mod
n
mod
s
n
const.is_a? ::Module
const.class
const.klass
const
c
q
c
q
::GDO.constants
c
byebug
c
mod
q
exception.backtrace
exception.trace
exception.stack
exception.stack_trace
q
c
mod
c
n
q
mod
n
s
mod
n
s
c
q
self.class
s
n
self
n
s
n
s
mod.class
mod
c
mod_db
q
@enum
@enum.next
c
@enum.next
mod_db.get_vars
mod_db,get_vars
q
mod
c
n
s
version
mod
version
c
n
c
n
s
version
n
mod
c
q
mod_db
mod
q
w
mod
mod_db
q
::GDO::Core::Module.instance
c
var
n
s
d
n
q
mod
mod.module_enabled
c
id
n
gdo
q
s
mod_db
n
mod
